"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const actor_init_sparql_1 = require("@comunica/actor-init-sparql");
const stringifyStream = require("stream-to-string");
/**
 * A GraphQL-LD engine that is backed by Comunica.
 */
class QueryEngineComunica {
    constructor(context) {
        this.comunicaEngine = actor_init_sparql_1.newEngine();
        this.context = context;
    }
    query(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.comunicaEngine.resultToString(yield this.comunicaEngine.query(query, Object.assign({}, options, this.context)), 'application/sparql-results+json');
            return JSON.parse(yield stringifyStream(data));
        });
    }
}
exports.QueryEngineComunica = QueryEngineComunica;
//# sourceMappingURL=QueryEngineComunica.js.map