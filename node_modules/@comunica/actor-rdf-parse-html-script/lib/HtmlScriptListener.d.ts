import { IActionRootRdfParse, IActorOutputRootRdfParse, IActorTestRootRdfParse } from "@comunica/bus-rdf-parse";
import { IHtmlParseListener } from "@comunica/bus-rdf-parse-html";
import { ActionContext, Actor, Mediator } from "@comunica/core";
import * as RDF from "rdf-js";
/**
 * An HTML parse listeners that detects <script> data blocks with known RDF media tyoes,
 * parses them, and outputs the resulting quads.
 */
export declare class HtmlScriptListener implements IHtmlParseListener {
    private readonly mediatorRdfParseHandle;
    private readonly cbQuad;
    private readonly cbError;
    private readonly cbEnd;
    private readonly supportedTypes;
    private readonly context;
    private readonly baseIRI;
    private handleMediaType;
    private textChunks;
    private endBarrier;
    constructor(mediatorRdfParseHandle: Mediator<Actor<IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>, IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>, cbQuad: (quad: RDF.Quad) => void, cbError: (error: Error) => void, cbEnd: () => void, supportedTypes: {
        [id: string]: number;
    }, context: ActionContext, baseIRI: string);
    onEnd(): void;
    onTagClose(): void;
    onTagOpen(name: string, attributes: {
        [p: string]: string;
    }): void;
    onText(data: string): void;
}
