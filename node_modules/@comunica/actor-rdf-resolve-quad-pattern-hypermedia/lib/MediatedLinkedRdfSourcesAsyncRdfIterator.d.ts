import { IActionRdfDereference, IActorRdfDereferenceOutput } from "@comunica/bus-rdf-dereference";
import { IActionRdfMetadata, IActorRdfMetadataOutput } from "@comunica/bus-rdf-metadata";
import { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from "@comunica/bus-rdf-metadata-extract";
import { IActionRdfResolveHypermedia, IActorRdfResolveHypermediaOutput } from "@comunica/bus-rdf-resolve-hypermedia";
import { IActionRdfResolveHypermediaLinks, IActorRdfResolveHypermediaLinksOutput } from "@comunica/bus-rdf-resolve-hypermedia-links";
import { ActionContext, Actor, IActorTest, Mediator } from "@comunica/core";
import * as RDF from "rdf-js";
import { ISourceState, LinkedRdfSourcesAsyncRdfIterator } from "./LinkedRdfSourcesAsyncRdfIterator";
/**
 * An quad iterator that can iterate over consecutive RDF sources
 * that are determined using the rdf-resolve-hypermedia-links bus.
 *
 * @see LinkedRdfSourcesAsyncRdfIterator
 */
export declare class MediatedLinkedRdfSourcesAsyncRdfIterator extends LinkedRdfSourcesAsyncRdfIterator {
    private readonly mediatorRdfDereference;
    private readonly mediatorMetadata;
    private readonly mediatorMetadataExtract;
    private readonly mediatorRdfResolveHypermedia;
    private readonly mediatorRdfResolveHypermediaLinks;
    private readonly context;
    private readonly forceSourceType;
    private readonly handledUrls?;
    constructor(cacheSize: number, context: ActionContext, forceSourceType: string, subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term, firstUrl: string, mediators: IMediatorArgs);
    protected getNextUrls(metadata: {
        [id: string]: any;
    }): Promise<string[]>;
    protected getNextSource(url: string, handledDatasets: {
        [type: string]: boolean;
    }): Promise<ISourceState>;
}
export interface IMediatorArgs {
    mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;
    mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>, IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;
    mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;
    mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;
    mediatorRdfResolveHypermediaLinks: Mediator<Actor<IActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput>, IActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput>;
}
