import { ILazyQuadSource } from "@comunica/bus-rdf-resolve-quad-pattern";
import { ActionContext } from "@comunica/core";
import { AsyncIterator } from "asynciterator";
import * as RDF from "rdf-js";
import { ISourcesState } from "./LinkedRdfSourcesAsyncRdfIterator";
import { IMediatorArgs } from "./MediatedLinkedRdfSourcesAsyncRdfIterator";
/**
 * A lazy quad source that creates {@link MediatedLinkedRdfSourcesAsyncRdfIterator} instances when matching quads.
 *
 * @see MediatedLinkedRdfSourcesAsyncRdfIterator
 */
export declare class MediatedQuadSource implements ILazyQuadSource {
    readonly context: ActionContext;
    readonly firstUrl: string;
    readonly forceSourceType: string;
    readonly mediators: IMediatorArgs;
    sourcesState: ISourcesState;
    private readonly cacheSize;
    constructor(cacheSize: number, context: ActionContext, firstUrl: string, forceSourceType: string, mediators: IMediatorArgs);
    matchLazy(subject?: RegExp | RDF.Term, predicate?: RegExp | RDF.Term, object?: RegExp | RDF.Term, graph?: RegExp | RDF.Term): AsyncIterator<RDF.Quad> & RDF.Stream;
    match(subject?: RegExp | RDF.Term, predicate?: RegExp | RDF.Term, object?: RegExp | RDF.Term, graph?: RegExp | RDF.Term): RDF.Stream;
}
