import { IActionHttp, IActorHttpOutput } from "@comunica/bus-http";
import { ActorQueryOperation, IActionQueryOperation, IActorQueryOperationOutput, IActorQueryOperationOutputBindings } from "@comunica/bus-query-operation";
import { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from "@comunica/core";
import { IMediatorTypeHttpRequests } from "@comunica/mediatortype-httprequests";
import { SparqlEndpointFetcher } from "fetch-sparql-endpoint";
import { Algebra, Factory } from "sparqlalgebrajs";
/**
 * A comunica SPARQL Endpoint Query Operation Actor.
 */
export declare class ActorQueryOperationSparqlEndpoint extends ActorQueryOperation {
    protected static readonly FACTORY: Factory;
    readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>, IActionHttp, IActorTest, IActorHttpOutput>;
    readonly endpointFetcher: SparqlEndpointFetcher;
    protected lastContext: ActionContext;
    constructor(args: IActorQueryOperationSparqlEndpointArgs);
    /**
     * Wrap a pattern in a select query.
     * @param {Operation} operation An operation.
     * @return {Project} A select query.
     */
    static patternToSelectQuery(operation: Algebra.Operation): Algebra.Project;
    test(action: IActionQueryOperation): Promise<IMediatorTypeHttpRequests>;
    run(action: IActionQueryOperation): Promise<IActorQueryOperationOutputBindings>;
}
export interface IActorQueryOperationSparqlEndpointArgs extends IActorArgs<IActionQueryOperation, IActorTest, IActorQueryOperationOutput> {
    mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>, IActionHttp, IActorTest, IActorHttpOutput>;
}
