import { ActorQueryOperationTyped, IActionQueryOperation, IActorQueryOperationOutput, IActorQueryOperationOutputBindings } from "@comunica/bus-query-operation";
import { IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternOutput } from "@comunica/bus-rdf-resolve-quad-pattern";
import { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from "@comunica/core";
import * as RDF from "rdf-js";
import { Algebra } from "sparqlalgebrajs";
/**
 * A comunica actor for handling 'quadpattern' query operations.
 */
export declare class ActorQueryOperationQuadpattern extends ActorQueryOperationTyped<Algebra.Pattern> implements IActorQueryOperationQuadpatternArgs {
    readonly mediatorResolveQuadPattern: Mediator<Actor<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>, IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>;
    constructor(args: IActorQueryOperationQuadpatternArgs);
    /**
     * Check if a term is a variable.
     * @param {RDF.Term} term An RDF term.
     * @return {any} If the term is a variable or blank node.
     */
    static isTermVariable(term: RDF.Term): any;
    /**
     * Get all variables in the given pattern.
     * No duplicates are returned.
     * @param {RDF.BaseQuad} pattern A quad pattern.
     * @return {string[]} The variables in this pattern, without '?' prefix.
     */
    getVariables(pattern: RDF.BaseQuad): string[];
    testOperation(operation: Algebra.Pattern, context?: {
        [id: string]: any;
    }): Promise<IActorTest>;
    runOperation(pattern: Algebra.Pattern, context: ActionContext): Promise<IActorQueryOperationOutputBindings>;
}
export interface IActorQueryOperationQuadpatternArgs extends IActorArgs<IActionQueryOperation, IActorTest, IActorQueryOperationOutput> {
    mediatorResolveQuadPattern: Mediator<Actor<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>, IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>;
}
