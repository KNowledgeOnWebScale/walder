import { AbstractBindingHash, IActorInitRdfDereferencePagedArgs } from "@comunica/actor-abstract-bindings-hash";
import { Bindings } from "@comunica/bus-query-operation";
import { Algebra } from "sparqlalgebrajs";
/**
 * A comunica Distinct Hash Query Operation Actor.
 */
export declare class ActorQueryOperationDistinctHash extends AbstractBindingHash<Algebra.Distinct> implements IActorInitRdfDereferencePagedArgs {
    constructor(args: IActorInitRdfDereferencePagedArgs);
    /**
     * Create a new distinct filter function for the given hash algorithm and digest algorithm.
     * This will maintain an internal hash datastructure so that every bindings object only returns true once.
     * @param {string} hashAlgorithm A hash algorithm.
     * @param {string} digestAlgorithm A digest algorithm.
     * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.
     */
    newHashFilter(hashAlgorithm: string, digestAlgorithm: string): (bindings: Bindings) => boolean;
}
