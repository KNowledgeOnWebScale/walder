"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actor_abstract_path_1 = require("@comunica/actor-abstract-path");
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const rdf_string_1 = require("rdf-string");
const sparqlalgebrajs_1 = require("sparqlalgebrajs");
/**
 * A comunica Path ZeroOrMore Query Operation Actor.
 */
class ActorQueryOperationPathZeroOrMore extends actor_abstract_path_1.ActorAbstractPath {
    constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_MORE_PATH);
    }
    async runOperation(path, context) {
        const predicate = path.predicate;
        const sVar = path.subject.termType === 'Variable';
        const oVar = path.object.termType === 'Variable';
        if (sVar && oVar) {
            throw new Error('ZeroOrMore path expressions with 2 variables not supported yet');
        }
        else if (!sVar && !oVar) {
            const bindingsStream = (await this.ALPeval(path.subject, predicate.path, context))
                .transform({
                filter: (item) => item.equals(path.object),
                transform: (item, next) => {
                    bindingsStream._push(bus_query_operation_1.Bindings({}));
                    next(null);
                },
            });
            return { type: 'bindings', bindingsStream, variables: [] };
        }
        else { // if (sVar || oVar)
            const v = rdf_string_1.termToString(sVar ? path.subject : path.object);
            const pred = sVar ? actor_abstract_path_1.ActorAbstractPath.FACTORY.createInv(predicate.path) : predicate.path;
            const bindingsStream = (await this.ALPeval(sVar ? path.object : path.subject, pred, context))
                .transform({
                transform: (item, next) => {
                    bindingsStream._push(bus_query_operation_1.Bindings({ [v]: item }));
                    next(null);
                },
            });
            return { type: 'bindings', bindingsStream, variables: [v] };
        }
    }
}
exports.ActorQueryOperationPathZeroOrMore = ActorQueryOperationPathZeroOrMore;
//# sourceMappingURL=ActorQueryOperationPathZeroOrMore.js.map