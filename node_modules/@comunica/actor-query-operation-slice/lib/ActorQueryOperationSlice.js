"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bus_query_operation_1 = require("@comunica/bus-query-operation");
/**
 * A comunica Slice Query Operation Actor.
 */
class ActorQueryOperationSlice extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'slice');
    }
    async testOperation(pattern, context) {
        return true;
    }
    async runOperation(pattern, context) {
        // Resolve the input
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: pattern.input, context }));
        // Slice the bindings stream
        const hasLength = !!pattern.length || pattern.length === 0;
        const bindingsStream = output.bindingsStream.range(pattern.start, hasLength ? pattern.start + pattern.length - 1 : Infinity);
        // If we find metadata, apply slicing on the total number of items
        const metadata = !output.metadata ? null : () => output.metadata()
            .then((subMetadata) => {
            let totalItems = subMetadata.totalItems;
            if (isFinite(totalItems)) {
                totalItems = Math.max(0, totalItems - pattern.start);
                if (hasLength) {
                    totalItems = Math.min(totalItems, pattern.length);
                }
            }
            return Object.assign({}, subMetadata, { totalItems });
        });
        return { type: 'bindings', bindingsStream, metadata, variables: output.variables };
    }
}
exports.ActorQueryOperationSlice = ActorQueryOperationSlice;
//# sourceMappingURL=ActorQueryOperationSlice.js.map