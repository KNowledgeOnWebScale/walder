import { ActorQueryOperationTypedMediated, IActorQueryOperationTypedMediatedArgs } from "@comunica/bus-query-operation";
import { ActionContext, IActorTest } from "@comunica/core";
import { AsyncIterator, BufferedIterator } from "asynciterator";
import { BlankNode, Term } from "rdf-js";
import { Algebra, Factory } from "sparqlalgebrajs";
/**
 * An abstract actor that handles Path operations.
 *
 * Provides multiple helper functions used by the Path operation actors.
 */
export declare abstract class ActorAbstractPath extends ActorQueryOperationTypedMediated<Algebra.Path> {
    protected static readonly FACTORY: Factory;
    protected readonly predicateType: string;
    protected constructor(args: IActorQueryOperationTypedMediatedArgs, predicateType: string);
    testOperation(pattern: Algebra.Path, context: ActionContext): Promise<IActorTest>;
    generateBlankNode(path?: Algebra.Path, name?: string): BlankNode;
    ALPeval(x: Term, predicate: Algebra.PropertyPathSymbol, context: ActionContext): Promise<AsyncIterator<Term>>;
    ALP(x: Term, predicate: Algebra.PropertyPathSymbol, context: ActionContext, V: {
        [id: string]: Term;
    }, it: BufferedIterator<Term>, counter: any): Promise<void>;
}
