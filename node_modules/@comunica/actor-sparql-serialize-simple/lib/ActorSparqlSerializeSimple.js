"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bus_sparql_serialize_1 = require("@comunica/bus-sparql-serialize");
const stream_1 = require("stream");
/**
 * A comunica Simple Sparql Serialize Actor.
 */
class ActorSparqlSerializeSimple extends bus_sparql_serialize_1.ActorSparqlSerializeFixedMediaTypes {
    constructor(args) {
        super(args);
    }
    async testHandleChecked(action, context) {
        if (['bindings', 'quads', 'boolean'].indexOf(action.type) < 0) {
            throw new Error('This actor can only handle bindings streams, quad streams or booleans.');
        }
        return true;
    }
    async runHandle(action, mediaType, context) {
        const data = new stream_1.Readable();
        data._read = () => {
            return;
        };
        let resultStream;
        if (action.type === 'bindings') {
            resultStream = action.bindingsStream;
            resultStream.on('error', (e) => data.emit('error', e));
            resultStream.on('data', (bindings) => data.push(bindings.map((value, key) => key + ': ' + value.value).join('\n') + '\n\n'));
            resultStream.on('end', () => data.push(null));
        }
        else if (action.type === 'quads') {
            resultStream = action.quadStream;
            resultStream.on('error', (e) => data.emit('error', e));
            resultStream.on('data', (quad) => data.push('subject: ' + quad.subject.value + '\n'
                + 'predicate: ' + quad.predicate.value + '\n'
                + 'object: ' + quad.object.value + '\n'
                + 'graph: ' + quad.graph.value + '\n\n'));
            resultStream.on('end', () => data.push(null));
        }
        else {
            try {
                data.push(JSON.stringify(await action.booleanResult) + '\n');
                data.push(null);
            }
            catch (e) {
                setImmediate(() => data.emit('error', e));
            }
        }
        return { data };
    }
}
exports.ActorSparqlSerializeSimple = ActorSparqlSerializeSimple;
//# sourceMappingURL=ActorSparqlSerializeSimple.js.map