import { IJsonLdContextNormalized } from "jsonld-context-parser/lib/JsonLdContext";
import * as RDF from "rdf-js";
/**
 * Utility functions and methods.
 */
export declare class Util {
    static readonly XSD: string;
    static readonly XSD_STRING: string;
    static readonly RDF: string;
    static readonly RDF_TYPE: string;
    /**
     * Convert an RDF term to a JSON value.
     * @param {Term} term An RDF term.
     * @param {IJsonLdContextNormalized} context The context.
     * @param {ITermToValueOptions} options Conversion options.
     * @return {any} A JSON value.
     */
    static termToValue(term: RDF.Term, context: IJsonLdContextNormalized, options?: ITermToValueOptions): any;
    /**
     * Convert a string term to a native type.
     * If no conversion is possible, the original string will be returned.
     * @param {string} value An RDF term's string value.
     * @param {string} type
     * @return {any}
     */
    static stringToNativeType(value: string, type: string): any;
}
export interface ITermToValueOptions {
    /**
     * If '@id' objects without other entries should be compacted.
     */
    compactIds?: boolean;
    /**
     * If literals should be converted to primitive types, such as booleans and integers.
     * Defaults to false.
     */
    useNativeTypes?: boolean;
    /**
     * If vocab-mode should be used for term compacting.
     * Defaults to false.
     */
    vocab?: boolean;
}
