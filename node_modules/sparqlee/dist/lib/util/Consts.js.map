{"version":3,"file":"Consts.js","sourceRoot":"","sources":["../../../lib/util/Consts.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:variable-name\nimport * as RDFDM from '@rdfjs/data-model';\nimport { Map, Set } from 'immutable';\nimport * as RDF from 'rdf-js';\n\nexport const TRUE_STR = '\"true\"^^xsd:boolean';\nexport const FALSE_STR = '\"false\"^^xsd:boolean';\nexport const EVB_ERR_STR = '\"not an dateTime\"^^xsd:dateTime';\n\n// TODO: Consider inlining all with 'const enum'\nexport enum TypeURL {\n  XSD_ANY_URI = 'http://www.w3.org/2001/XMLSchema#anyURI',\n  XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string',\n  RDF_LANG_STRING = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString',\n\n  XSD_BOOLEAN = 'http://www.w3.org/2001/XMLSchema#boolean',\n\n  XSD_DATE_TIME = 'http://www.w3.org/2001/XMLSchema#dateTime',\n  XSD_DATE = 'http://www.w3.org/2001/XMLSchema#date',\n\n  // Numeric types\n  XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer',\n  XSD_DECIMAL = 'http://www.w3.org/2001/XMLSchema#decimal',\n  XSD_FLOAT = 'http://www.w3.org/2001/XMLSchema#float',\n  XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double',\n\n  // Derived numeric types\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n\n  // Other types\n  XSD_DAYTIME_DURATION = 'http://www.w3.org/2001/XMLSchema#dayTimeDuration',\n}\n\nexport function make(dt: TypeURL) {\n  return RDFDM.namedNode(dt);\n}\n\n// https://www.w3.org/TR/sparql11-query/#operandDataTypes\nexport enum NumericTypeURL {\n  // Numeric types\n  XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer',\n  XSD_DECIMAL = 'http://www.w3.org/2001/XMLSchema#decimal',\n  XSD_FLOAT = 'http://www.w3.org/2001/XMLSchema#float',\n  XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double',\n\n  // Derived numeric types\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n}\n\nexport enum DerivedIntegerTypeURL {\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n}\n\nexport const NumericTypeURLs = Set(Object.values(NumericTypeURL));\nexport const DerivedIntegerTypeURLs = Set(Object.values(DerivedIntegerTypeURL));\n\nexport const commonTerms: { [key: string]: RDF.Term } = {\n  true: RDFDM.literal('true', RDFDM.namedNode(TypeURL.XSD_BOOLEAN)),\n  false: RDFDM.literal('false', RDFDM.namedNode(TypeURL.XSD_BOOLEAN)),\n};\n\n// TODO: Rename to primitive\n// https://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes\nexport type Type =\n  'string'\n  | 'langString'\n  | 'date'\n  | 'boolean'\n  | 'integer'\n  | 'decimal'\n  | 'float'\n  | 'double'\n  | 'other'\n  | 'nonlexical';\n\nexport type PrimitiveNumericType = 'integer' | 'decimal' | 'float' | 'double';\nexport const PrimitiveNumericTypes = Set(['integer', 'decimal', 'float', 'double']);\n\nexport function type(typeURL: string): Type {\n  switch (typeURL) {\n    case null:\n    case undefined:\n    case '':\n    case TypeURL.XSD_ANY_URI: return 'string';\n    case TypeURL.XSD_STRING: return 'string';\n    case TypeURL.RDF_LANG_STRING: return 'langString';\n    case TypeURL.XSD_DATE_TIME: return 'date';\n    case TypeURL.XSD_BOOLEAN: return 'boolean';\n\n    case TypeURL.XSD_DECIMAL: return 'decimal';\n    case TypeURL.XSD_FLOAT: return 'float';\n    case TypeURL.XSD_DOUBLE: return 'double';\n    case TypeURL.XSD_INTEGER:\n    case TypeURL.XSD_NON_POSITIVE_INTEGER:\n    case TypeURL.XSD_NEGATIVE_INTEGER:\n    case TypeURL.XSD_LONG:\n    case TypeURL.XSD_INT:\n    case TypeURL.XSD_SHORT:\n    case TypeURL.XSD_BYTE:\n    case TypeURL.XSD_NON_NEGATIVE_INTEGER:\n    case TypeURL.XSD_UNSIGNED_LONG:\n    case TypeURL.XSD_UNSIGNED_INT:\n    case TypeURL.XSD_UNSIGNED_SHORT:\n    case TypeURL.XSD_UNSIGNED_BYTE:\n    case TypeURL.XSD_POSITIVE_INTEGER: return 'integer';\n    default: return 'other';\n  }\n}\n\n// If datatypes get lost or lose specificity during operations, we can insert a\n// concrete type, since categories should remain the same. This mostly (only)\n// relevant for integer subtypes.\nconst _decategorize = Map<PrimitiveNumericType, TypeURL>([\n  ['integer', TypeURL.XSD_INTEGER],\n  ['float', TypeURL.XSD_FLOAT],\n  ['double', TypeURL.XSD_DOUBLE],\n  ['decimal', TypeURL.XSD_DECIMAL],\n]);\n\nexport function decategorize(cat: PrimitiveNumericType): TypeURL {\n  return _decategorize.get(cat);\n}\n\n// ----------------------------------------------------------------------------\n// Operators\n// ----------------------------------------------------------------------------\n\nexport type OperatorCategory = 'regular' | 'special';\nexport type Operator = RegularOperator | SpecialOperator;\n\n// TODO: Remove unneeded double typing\nexport enum RegularOperator {\n  // Operator mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  NOT = '!',\n  UMINUS = 'UMINUS',\n  UPLUS = 'UPLUS',\n  // LOGICAL_AND // See SpecialOperators\n  // LOGICAL_OR  // See SpecialOperators\n\n  EQUAL = '=',\n  NOT_EQUAL = '!=',\n  LT = '<',\n  GT = '>',\n  LTE = '<=',\n  GTE = '>=',\n\n  MULTIPLICATION = '*',\n  DIVISION = '/',\n  ADDITION = '+',\n  SUBTRACTION = '-',\n\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // See SpecialOperators\n\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  IS_IRI = 'isiri',\n  IS_BLANK = 'isblank',\n  IS_LITERAL = 'isliteral',\n  IS_NUMERIC = 'isnumeric',\n  STR = 'str',\n  LANG = 'lang',\n  DATATYPE = 'datatype',\n  // IRI = 'iri', (see special operators)\n  // URI = 'uri', (see special operators)\n  // BNODE = 'BNODE', (see special operators)\n  STRDT = 'strdt',\n  STRLANG = 'strlang',\n  UUID = 'uuid',\n  STRUUID = 'struuid',\n\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-strings\n  STRLEN = 'strlen',\n  SUBSTR = 'substr',\n  UCASE = 'ucase',\n  LCASE = 'lcase',\n  STRSTARTS = 'strstarts',\n  STRENDS = 'strends',\n  CONTAINS = 'contains',\n  STRBEFORE = 'strbefore',\n  STRAFTER = 'strafter',\n  ENCODE_FOR_URI = 'encode_for_uri',\n  // CONCAT = 'concat' (see special operators)\n  LANG_MATCHES = 'langmatches',\n  REGEX = 'regex',\n  REPLACE = 'replace',\n\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  ABS = 'abs',\n  ROUND = 'round',\n  CEIL = 'ceil',\n  FLOOR = 'floor',\n  RAND = 'rand',\n\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  // NOW = 'now' (see special operators)\n  YEAR = 'year',\n  MONTH = 'month',\n  DAY = 'day',\n  HOURS = 'hours',\n  MINUTES = 'minutes',\n  SECONDS = 'seconds',\n  TIMEZONE = 'timezone',\n  TZ = 'tz',\n\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  MD5 = 'md5',\n  SHA1 = 'sha1',\n  SHA256 = 'sha256',\n  SHA384 = 'sha384',\n  SHA512 = 'sha512',\n\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // See Named Operators\n}\n\nexport enum SpecialOperator {\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  BOUND = 'bound',\n  IF = 'if',\n  COALESCE = 'coalesce',\n  // EXISTENCE = 'existence',\n  LOGICAL_OR = '||',\n  LOGICAL_AND = '&&',\n  // EQUAL = '=', // See RegularOperators\n  SAME_TERM = 'sameterm',\n  IN = 'in',\n  NOT_IN = 'notin',\n\n  // Annoying functions\n  CONCAT = 'concat', // Has variable arity\n\n  // Context dependant functions\n  NOW = 'now',\n  IRI = 'iri',\n  URI = 'uri',\n  BNODE = 'BNODE',\n}\n\nexport const RegularOperators = Set(Object.values(RegularOperator));\nexport const SpecialOperators = Set(Object.values(SpecialOperator));\nexport const Operators = RegularOperators.union(SpecialOperators);\n\nexport enum SetFunction {\n  COUNT = 'count',\n  SUM = 'sum',\n  MIN = 'min',\n  MAX = 'max',\n  AVG = 'avg',\n  GROUP_CONCAT = 'group_concat',\n  SAMPLE = 'sample',\n}\nexport const SetFunctions = Set(Object.values(SetFunction));\n\nexport type NamedOperator =\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  TypeURL.XSD_STRING\n  | TypeURL.XSD_FLOAT\n  | TypeURL.XSD_DOUBLE\n  | TypeURL.XSD_DECIMAL\n  | TypeURL.XSD_INTEGER\n  | TypeURL.XSD_DATE_TIME\n  | TypeURL.XSD_DATE\n  | TypeURL.XSD_BOOLEAN;\n\nexport const NamedOperators = Set([\n  TypeURL.XSD_STRING,\n  TypeURL.XSD_FLOAT,\n  TypeURL.XSD_DOUBLE,\n  TypeURL.XSD_DECIMAL,\n  TypeURL.XSD_INTEGER,\n  TypeURL.XSD_DATE_TIME,\n  TypeURL.XSD_DATE,\n  TypeURL.XSD_BOOLEAN,\n]);\n"]}