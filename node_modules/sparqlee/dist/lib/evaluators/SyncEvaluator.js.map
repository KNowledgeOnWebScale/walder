{"version":3,"file":"SyncEvaluator.js","sourceRoot":"","sources":["../../../lib/evaluators/SyncEvaluator.ts"],"names":[],"mappings":";;AAKA,sDAAqD;AAGrD,iFAAwE;AAkBxE,MAAa,aAAa;IAIxB,YAAmB,OAAuB,EAAS,SAA8B,EAAE;QAAhE,YAAO,GAAP,OAAO,CAAgB;QAAS,WAAM,GAAN,MAAM,CAA0B;QACjF,IAAI,CAAC,IAAI,GAAG,iCAAgB,CAAC,OAAO,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAyB;YACpC,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YACvC,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,SAAS;YACpC,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,SAAS,EAAE,MAAM,CAAC,SAAS;SAC5B,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,qDAAsB,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,QAAQ,CAAC,OAAiB;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAED,aAAa,CAAC,OAAiB;QAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;IACjC,CAAC;IAED,kBAAkB,CAAC,OAAiB;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC;CACF;AA/BD,sCA+BC;AAED,SAAS,GAAG,CAAI,GAAM;IACpB,oBAAoB;IACpB,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import * as RDF from 'rdf-js';\nimport { Algebra as Alg } from 'sparqlalgebrajs';\n\nimport * as E from '../expressions/Expressions';\n\nimport { transformAlgebra } from '../Transformation';\nimport { Bindings, ExpressionEvaluator } from '../Types';\n\nimport { SyncRecursiveEvaluator } from './RecursiveExpressionEvaluator';\n\ntype Expression = E.Expression;\ntype Term = E.TermExpression;\n\nexport interface SyncEvaluatorConfig {\n  now?: Date;\n  baseIRI?: string;\n\n  exists?: (expression: Alg.ExistenceExpression, mapping: Bindings) => boolean;\n  aggregate?: (expression: Alg.AggregateExpression) => RDF.Term;\n  bnode?: (input?: string) => RDF.BlankNode;\n}\n\nexport type SyncEvaluatorContext = SyncEvaluatorConfig & {\n  now: Date;\n};\n\nexport class SyncEvaluator {\n  private expr: Expression;\n  private evaluator: ExpressionEvaluator<Expression, Term>;\n\n  constructor(public algExpr: Alg.Expression, public config: SyncEvaluatorConfig = {}) {\n    this.expr = transformAlgebra(algExpr);\n\n    const context: SyncEvaluatorContext = {\n      now: config.now || new Date(Date.now()),\n      baseIRI: config.baseIRI || undefined,\n      exists: config.exists,\n      aggregate: config.aggregate,\n    };\n\n    this.evaluator = new SyncRecursiveEvaluator(context);\n  }\n\n  evaluate(mapping: Bindings): RDF.Term {\n    const result = this.evaluator.evaluate(this.expr, mapping);\n    return log(result).toRDF();\n  }\n\n  evaluateAsEBV(mapping: Bindings): boolean {\n    const result = this.evaluator.evaluate(this.expr, mapping);\n    return log(result).coerceEBV();\n  }\n\n  evaluateAsInternal(mapping: Bindings): Term {\n    const result = this.evaluator.evaluate(this.expr, mapping);\n    return log(result);\n  }\n}\n\nfunction log<T>(val: T): T {\n  // console.log(val);\n  return val;\n}\n"]}