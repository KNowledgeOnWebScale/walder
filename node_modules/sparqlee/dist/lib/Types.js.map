{"version":3,"file":"Types.js","sourceRoot":"","sources":["../../lib/Types.ts"],"names":[],"mappings":";;AAAA,yCAAgC;AAahC;;;;;GAKG;AACH,SAAgB,QAAQ,CAAC,IAAiC;IACxD,OAAO,eAAG,CAAC,IAAI,CAAC,CAAC;AACnB,CAAC;AAFD,4BAEC;AAMD,wBAAwB;AACxB,+BAA+B;AAC/B,+BAA+B;AAC/B,+BAA+B;AAC/B,KAAK;AAEL,oBAAoB;AACpB,sFAAsF;AACtF,0FAA0F;AAC1F,4GAA4G","sourcesContent":["import { Map } from 'immutable';\nimport * as RDF from 'rdf-js';\nimport { Algebra as Alg } from 'sparqlalgebrajs';\n\n/**\n * An immutable solution mapping object.\n * This maps variables to a terms.\n *\n * Variables are represented as strings containing the variable name (without '?').\n * Terms are named nodes, literals or the default graph.\n */\nexport type Bindings = Map<string, RDF.Term>;\n\n/**\n * A convenience constructor for bindings based on a given hash.\n * @param {{[p: string]: RDF.Term}} hash A hash that maps variable names to terms.\n * @return {Bindings} The immutable bindings from the hash.\n * @constructor\n */\nexport function Bindings(hash: { [key: string]: RDF.Term }): Bindings {\n  return Map(hash);\n}\n\nexport interface ExpressionEvaluator<ExpressionType, TermType> {\n  evaluate(expr: ExpressionType, mapping: Bindings): TermType;\n}\n\n// export type Hooks = {\n//   existence?: ExistenceHook;\n//   aggregate?: AggregateHook;\n//   namedFunc?: NamedFuncHook;\n// };\n\n// // TODO: Document\n// export type NamedFuncHook = (expression: Alg.NamedExpression) => Promise<RDF.Term>;\n// export type AggregateHook = (expression: Alg.AggregateExpression) => Promise<RDF.Term>;\n// export type ExistenceHook = (expression: Alg.ExistenceExpression, mapping: Bindings) => Promise<boolean>;\n"]}