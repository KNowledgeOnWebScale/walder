#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RDF = require("@rdfjs/data-model");
const AsyncEvaluator_1 = require("../lib/evaluators/AsyncEvaluator");
const Types_1 = require("../lib/Types");
const U = require("../util/Util");
// import { Example, example1, mockLookUp, parse, parseFull } from '../util/Util';
function print(expr, full) {
    const parsedExpr = (full) ? U.parseFull(expr) : U.parse(expr);
    console.log(JSON.stringify(parsedExpr, null, 4));
}
async function testEval() {
    const ex = new U.Example('langMatches(?a, "de-*-DE")', () => Types_1.Bindings({
        '?a': RDF.literal('aaa'),
    }));
    // tslint:disable-next-line:no-any
    const evaluator = new AsyncEvaluator_1.AsyncEvaluator(undefined, U.mockHooks);
    const presult = evaluator.evaluate(ex.mapping()).catch((err) => console.log(err));
    const val = await presult;
    console.log(val);
}
testEval();
// print('SELECT (strlen(?s) as ?l) WHERE { ?s ?p ?o }', true);
// print('isIRI(<mailto:test@example.com>)');
// print('bound(?a)');
// print('IF(?a, ?a, ?a)');
// print('coalesce(?a, ?a)');
// print('NOT EXISTS {}');
// print('EXISTS {}');
// print('sameTerm(?a, ?a)');
// print('?a IN (?a, ?a)');
// print('?a NOT IN (?a, ?a)');
// print('-?a');
// print('EXISTS {?a ?b ?c}');
// print('?a + str(<http://example.com>)')
// print('"aaaaaaa"')
// print('bound(?a)');
// print('isLiteral(?a)');
// print('COUNT(?a)')
// print('xsd:dateTime(?a)');
// print('-?a');
// print('(?a > ?b) = ?c')
// print('fn:not("a")');
// main();
//# sourceMappingURL=Manual.js.map