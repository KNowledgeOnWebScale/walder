{"version":3,"file":"Manual.js","sourceRoot":"","sources":["../../bin/Manual.ts"],"names":[],"mappings":";;;AAGA,yCAAyC;AAIzC,qEAAkE;AAClE,wCAAwC;AAGxC,kCAAkC;AAClC,kFAAkF;AAElF,SAAS,KAAK,CAAC,IAAY,EAAE,IAAc;IACzC,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,KAAK,UAAU,QAAQ;IACrB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,4BAA4B,EAAE,GAAG,EAAE,CAAC,gBAAQ,CAAC;QACpE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;KACzB,CAAC,CAAC,CAAC;IACJ,kCAAkC;IAClC,MAAM,SAAS,GAAG,IAAI,+BAAc,CAAC,SAAgB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;IACpE,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAClF,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC;IAC1B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACnB,CAAC;AAED,QAAQ,EAAE,CAAC;AACX,+DAA+D;AAC/D,6CAA6C;AAC7C,sBAAsB;AACtB,2BAA2B;AAC3B,6BAA6B;AAC7B,0BAA0B;AAC1B,sBAAsB;AACtB,6BAA6B;AAC7B,2BAA2B;AAC3B,+BAA+B;AAC/B,gBAAgB;AAChB,8BAA8B;AAC9B,0CAA0C;AAC1C,qBAAqB;AACrB,sBAAsB;AACtB,0BAA0B;AAC1B,qBAAqB;AACrB,6BAA6B;AAC7B,gBAAgB;AAChB,0BAA0B;AAC1B,wBAAwB;AACxB,UAAU","sourcesContent":["#! /usr/bin/env node\n// tslint:disable:no-console\n\nimport * as RDF from '@rdfjs/data-model';\nimport { Algebra as Alg } from 'sparqlalgebrajs';\n\nimport { ArrayIterator, AsyncIterator } from 'asynciterator';\nimport { AsyncEvaluator } from '../lib/evaluators/AsyncEvaluator';\nimport { Bindings } from '../lib/Types';\nimport { TypeURL as DT } from '../lib/util/Consts';\nimport * as C from '../lib/util/Consts';\nimport * as U from '../util/Util';\n// import { Example, example1, mockLookUp, parse, parseFull } from '../util/Util';\n\nfunction print(expr: string, full?: boolean): void {\n  const parsedExpr = (full) ? U.parseFull(expr) : U.parse(expr);\n  console.log(JSON.stringify(parsedExpr, null, 4));\n}\n\nasync function testEval() {\n  const ex = new U.Example('langMatches(?a, \"de-*-DE\")', () => Bindings({\n    '?a': RDF.literal('aaa'),\n  }));\n  // tslint:disable-next-line:no-any\n  const evaluator = new AsyncEvaluator(undefined as any, U.mockHooks);\n  const presult = evaluator.evaluate(ex.mapping()).catch((err) => console.log(err));\n  const val = await presult;\n  console.log(val);\n}\n\ntestEval();\n// print('SELECT (strlen(?s) as ?l) WHERE { ?s ?p ?o }', true);\n// print('isIRI(<mailto:test@example.com>)');\n// print('bound(?a)');\n// print('IF(?a, ?a, ?a)');\n// print('coalesce(?a, ?a)');\n// print('NOT EXISTS {}');\n// print('EXISTS {}');\n// print('sameTerm(?a, ?a)');\n// print('?a IN (?a, ?a)');\n// print('?a NOT IN (?a, ?a)');\n// print('-?a');\n// print('EXISTS {?a ?b ?c}');\n// print('?a + str(<http://example.com>)')\n// print('\"aaaaaaa\"')\n// print('bound(?a)');\n// print('isLiteral(?a)');\n// print('COUNT(?a)')\n// print('xsd:dateTime(?a)');\n// print('-?a');\n// print('(?a > ?b) = ?c')\n// print('fn:not(\"a\")');\n// main();\n"]}