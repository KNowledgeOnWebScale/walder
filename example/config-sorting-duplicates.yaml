openapi: 3.0.2
info:
  title: 'Example site'
  version: 0.1.0
x-walder-resources:
  root: ./
  views: views
  pipe-modules: pipeModules
  public: public
x-walder-datasources:
  - http://fragments.dbpedia.org/2016-04/en
paths:
  /music/{musician}/sorted:
    get:
      # Working example: John Lennon
      summary: Returns a list of songs of the given musician, sorted in descending order by song label.
      parameters:
        - in: path
          name: musician
          required: true
          schema:
            type: string
          description: The target musician
      x-walder-query:
        graphql-query: >
          {
            label @single
            writer(label_en: $musician)  @single
            artist  @single(scope: all) {
              label
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
        options:
          sort:
            object: $[*]
            selectors:
              - value: label
                order: desc
      responses:
        200:
          description: list of songs
          x-walder-input-text/html: songs-with-artist.handlebars

  /music/{musician}/no_duplicates:
    get:
      # Working example: John Lennon
      summary: Returns a list of songs of the given musician, where duplicate songe names are removed.
      parameters:
        - in: path
          name: musician
          required: true
          schema:
            type: string
          description: The target musician
      x-walder-query:
        graphql-query: >
          {
            label @single
            writer(label_en: $musician)  @single
            artist  @single(scope: all) {
              label
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
        options:
          remove-duplicates:
            object: $[*]
            value: label
      responses:
        200:
          description: list of songs
          x-walder-input-text/html: songs.handlebars

  /music/{musician}/everything_together:
    get:
      # Working example: John Lennon
      summary: Returns a list of songs of the given musician, sorted in ascending order by label of the song and duplicate artists labels are removed.
      parameters:
        - in: path
          name: musician
          required: true
          schema:
            type: string
          description: The target musician
      x-walder-query:
        graphql-query: >
          {
            label @single
            writer(label_en: $musician)  @single
            artist  @single(scope: all) {
              label
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
        options:
          sort:
            object: $[*]
            selectors:
              - value: label
                order: desc
          remove-duplicates:
              object: $[*]
              value: label
      responses:
        200:
          description: list of songs
          x-walder-input-text/html: songs.handlebars

  /artist/{artist}:
    get:
      # Working example: David Bowie
      summary: Returns a list of songs and movies for a given artist. Where duplicate songs are removed and the movies are ordered by id in descending manner.
      parameters:
        - in: path
          name: artist
          required: true
          schema:
            type: string
          description: The target artist
      x-walder-query:
        graphql-query:
          songs:
            query: >
              {
                label @single
                writer(label_en: $artist)  @single
                artist  @single(scope: all) {
                  label
                }
              }
            options:
              remove-duplicates:
                object: $[*]
                value: label
          films:
            query: >
              {
                id @single
                ... on Film {
                  starring(label_en: $artist) @single
                }
              }
            options:
              sort:
                object: $[*]
                selectors:
                  - value: id
                    order: desc
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist",
              "Film": "http://dbpedia.org/ontology/Film",
              "starring": "http://dbpedia.org/ontology/starring"
            }
          }
      responses:
        200:
          description: list of songs and movies
          x-walder-input-text/html: songs_movies.handlebars

x-walder-errors:
  404:
    description: page not found error
    x-walder-input-text/html: error404.html
  500:
    description: internal server error
    x-walder-input-text/html: error500.html
