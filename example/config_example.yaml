resources:
  path: ./
  views: views
  pipe-modules: pipeModules
  public: public
datasources:
  - http://fragments.dbpedia.org/2016-04/en
paths:
  /books/harvard:
    get:
      summary: Returns a list of books by San Franciscans owned by the Harvard Library
      query:
        graphql-query: >
          {
            birthPlace(label_en: "San Francisco") @single
            viafPerson @single(scope: all) {
              name {
                nameOf {
                  contributedTo {
                    bookTitle
                  }
                }
              }
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label" },
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "birthPlace": "http://dbpedia.org/ontology/birthPlace",
              "viafPerson": { "@reverse": "http://schema.org/sameAs" },
              "name": { "@id": "http://schema.org/name" },
              "nameOf": { "@reverse": "http://xmlns.com/foaf/0.1/name" },
              "contributedTo": { "@reverse": "http://purl.org/dc/terms/contributor" },
              "bookTitle": { "@id": "http://purl.org/dc/terms/title" }
            }
          }
        datasources:
          additional: true
          sources:
            - http://data.linkeddatafragments.org/viaf
            - http://data.linkeddatafragments.org/harvard
      responses:
        200: books.pug
  /music/{musician}:
    get:
      summary: Returns a list of bands the given musician has wrote a song for.
      query:
        graphql-query: >
          {
            label @single
            writer(label_en: "John Lennon")  @single
            artist  @single(scope: all) {
              label
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
      responses:
        200: songs.handlebars
  /movies/brad_pitt_directors:
    get:
      summary: Returns a list of all movies Brad Pitt stars in with their directors
      query:
        graphql-query: >
          {
            label @single @id
            director @single(scope: all) {
             label
            }
            starring(label_en: "Brad Pitt")  @single
          }
        json-ld-context: >
          {
           "@context": {
             "label": "http://www.w3.org/2000/01/rdf-schema#label",
             "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
             "director": "http://dbpedia.org/ontology/director",
             "starring": "http://dbpedia.org/ontology/starring"
           }
          }
      responses:
        200: movies.handlebars
  /movies/brad_pitt:
    get:
      summary: Returns a paginated list of all movies Brad Pitt stars in
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
          description: The page that must be shown.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Maximum number of elements to be shown on the current page.
      query:
        graphql-query: >
          {
            id @single
            ... on Film{
              starring(label: "Brad Pitt" first: $limit offset: $offset) @single
            }
          }
        json-ld-context: >
          {
            "@context": {
              "Film": "http://dbpedia.org/ontology/Film",
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "starring": "http://dbpedia.org/ontology/starring"
            }
          }
      responses:
        200: movies.handlebars
  /bad_query:
    get:
      summary: Returns a status 500 error page - bad query.
      graphql-query: >
        {
          id @single
          ... {  # This will cause an error
            starring(label: "Brad Pitt") @single
          }
        }
      json-ld-context: >
        {
          "@context": {
            "Film": "http://dbpedia.org/ontology/Film",
            "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
            "starring": "http://dbpedia.org/ontology/starring"
          }
        }
      responses:
        200: movies.handlebars
  /bad_pipeModule:
    get:
      summary: Returns a status 500 error page - bad pipe module.
      graphql-query: >
        {
          id @single
          ... on Film{
            starring(label: "Brad Pitt") @single
          }
        }
      json-ld-context: >
        {
          "@context": {
            "Film": "http://dbpedia.org/ontology/Film",
            "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
            "starring": "http://dbpedia.org/ontology/starring"
          }
        }
      postprocessing:
        filterT:
          source: filterT_bad.js
      responses:
        200: movies.handlebars
  /movies/{actor}:
    get:
      summary: Returns a list of the all movies the given actor stars in
      query:
        graphql-query: >
          {
            id @single
            ... on Film {
              starring(label: $actor) @single
            }
          }
        json-ld-context: >
          {
            "@context": {
              "Film": "http://dbpedia.org/ontology/Film",
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "starring": "http://dbpedia.org/ontology/starring"
            }
          }
      responses:
        200: movies.pug
  /movies/{actor}/postprocessed:
    get:
      summary: Returns a list of the all movies the given actor stars in, filtered on movie titles containing 'A' and 'T'
      query:
        graphql-query: >
          {
            id @single
            ... on Film {
              starring(label: $actor) @single
            }
          }
        json-ld-context: >
          {
            "@context": {
              "Film": "http://dbpedia.org/ontology/Film",
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "starring": "http://dbpedia.org/ontology/starring"
            }
          }
      postprocessing:
        filterT:
          source: filterT.js
      responses:
        200: movies.pug
errors:
  404:  error404.html
  500:  error500.html
