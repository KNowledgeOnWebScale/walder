openapi: 3.0.2
info:
  title: 'Example site'
  version: 0.1.0
x-walder-resources:
  root: ./
  views: views
  pipe-modules: pipeModules
  public: public
x-walder-datasources:
  - http://fragments.dbpedia.org/2016-04/en
paths:
  /music/{musician}:
    get:
      summary: Returns a list of songs of the given musician.
      parameters:
        - in: path
          name: musician
          required: true
          schema:
            type: string
          description: The target musician
      x-walder-query:
        graphql-query: >
          {
            label @single
            artist(label_en: $musician)
          }
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
      responses:
        200:
          description: list of songs
          x-walder-input-text/html: songs.handlebars
  /artist/{artist}:
    get:
      summary: Returns a list of a given artist's songs written by a specific person.
      parameters:
        - in: path
          name: artist
          required: true
          schema:
            type: string
          description: The target artist
        - in: query
          name: writer
          required: true
          schema:
            type: string
      x-walder-query:
        graphql-query: >
          {
            label @single
            writer(label: $writer)  @single
            artist  @single(scope: all) {
              label(_:$artist)
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "writer": "http://dbpedia.org/ontology/writer",
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
      responses:
        200:
          description: list of songs
          x-walder-input-text/html: artist-writer.pug
  /bradpitt-directors:
    get:
      summary: Returns a list of directors of movies starring Brad Pitt
      x-walder-query:
        graphql-query: >
          {
            director @single(scope: all) {
              label
            }
            starring(label_en: "Brad Pitt")  @single
          }
        json-ld-context: >
          {
            "@context": {
              "label": "http://www.w3.org/2000/01/rdf-schema#label",
              "label_en": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "director": "http://dbpedia.org/ontology/director",
              "starring": "http://dbpedia.org/ontology/starring"
            }
          }
      responses:
        200:
          description: list of directors of movies starring Brad Pitt
          x-walder-input-text/html: directors.pug
  /music/{artist}/postprocessed:
    get:
      summary: Returns a list of the all songs of a given artist, only keeping those with titles containing 'star'.
      parameters:
        - in: path
          name: artist
          required: true
          schema:
            type: string
          description: The target artist
      x-walder-query:
        graphql-query: >
          {
            label @single
            artist {
              label(_:$artist)
            }
          }
        json-ld-context: >
          {
            "@context": {
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "artist": "http://dbpedia.org/ontology/musicalArtist"
            }
          }
      x-walder-postprocessing:
        filterT:
          source: filterT.js
      responses:
        200:
          description: list of songs
          x-walder-input-text/html: artist-writer.pug
  /movies/{actor}/postprocessed_with_variables:
    get:
      summary: Returns a list of the all movies the given actor stars in, filtered on movie titles containing 'A' and 'T'
      parameters:
        - in: path
          name: actor
          required: true
          schema:
            type: string
          description: The target actor
      x-walder-query:
        graphql-query: >
          {
            id @single
            ... on Film {
              starring(label: $actor) @single
            }
          }
        json-ld-context: >
          {
            "@context": {
              "Film": "http://dbpedia.org/ontology/Film",
              "label": { "@id": "http://www.w3.org/2000/01/rdf-schema#label", "@language": "en" },
              "starring": "http://dbpedia.org/ontology/starring"
            }
          }
      x-walder-postprocessing:
        filterT_withParameters:
          source: filterT_withParameters.js
          parameters:
            - _data
            - true
      responses:
        200:
          description: list of movies
          x-walder-input-text/html: movies.pug
x-walder-errors:
  404:
    description: page not found error
    x-walder-input-text/html: error404.html
  500:
    description: internal server error
    x-walder-input-text/html: error500.html
